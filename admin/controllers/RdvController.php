<?php
/**
 * Created by PhpStorm.
 * User: 37vip
 * Date: 06/12/2019
 * Time: 15:47
 */

namespace admin\controllers;

use common\models\Admin;
use common\models\IpProfessuer;
use common\models\IpRdv;
use common\models\IpRdvProfesseur;
use common\models\IpRdvStudent;
use common\models\IpRdvTemple;
use common\models\LocalDataArray;
use common\models\searchForm\RdvProfesseurForm;
use common\models\searchForm\RdvStudentForm;
use common\widgets\ArrayDatas;
use common\widgets\PublicFunctionUnion;
use Yii;
use yii\helpers\Json;
use yii\redactor\models\ImageUploadModel;
use yii\web\Controller;
use admin\models\AdminAccessControl;
use yii\filters\AccessControl;

class RdvController extends Controller
{

    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['index','upload','release_rdv','update_rdv_professeur',
                            'delete_rdv_professeur','rdv_students','update_rdv_student',
                            'delete_rdv_student'
                        ],
                        'allow' => true,
                        'matchCallback'=>function(){
                            return AdminAccessControl::getIsSuperAdmin();
                        }
                    ],
                    [
                        'actions' => ['update','index','delete_rdv'],
                        'allow' => true,
                        'matchCallback'=>function(){
                            return AdminAccessControl::getIsDba();
                        }
                    ],
                    [
                        'actions'=>['index'],
                        'allow'=>true,
                        'matchCallback'=>function() {
                            return AdminAccessControl::getIsStudent();
                        }
                    ]
                ],
            ],
        ];
    }




    public $prix = '';

    public function actions()
    {
        if (AdminAccessControl::getIsStudent()) {

            $langue = Yii::$app->session['langue'] ? Yii::$app->session['langue'] : 'fr';

            if ($langue == 'fr') {
                $this->prix = '';
            } else {
                $this->prix = '_zh';
            }

            $this->layout = 'student' . $this->prix;
        }else if (AdminAccessControl::getIsProfesseur()){
            $langue = Yii::$app->session['langue'] ? Yii::$app->session['langue'] : 'fr';

            if ($langue == 'fr') {
                $this->prix = '';
            } else {
                $this->prix = '_zh';
            }

            $this->layout = 'professeur' . $this->prix;

        }else{
            $this->layout = "admin";
        }


        return parent::actions(); // TODO: Change the autogenerated stub

    }




    public function actionIndex(){

        if (AdminAccessControl::getIsSuperAdmin()){

            $searchModel = new RdvProfesseurForm();
            $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

            return $this->render('lists_rdv',[
                'searchModel'=>$searchModel,
                'dataProvider'=>$dataProvider
            ]);
        }


        $item = IpRdvStudent::findOne(["sid"=>Yii::$app->user->getId(),'status'=>1]);


        if ($item){
            if ($item->stime>PublicFunctionUnion::getDateString()){
                return $this->render('rdv_student',['model'=>$item]);
            }else{
                $item->status = 0;
                $item->save();
            }
        }
        if (!AdminAccessControl::getIsDba()){
            return $this->render('rdv_disable');
        }
        $model = new IpRdvStudent();
        if (Yii::$app->request->post()&&$model->load(Yii::$app->request->post())){
            $model->steps = Yii::$app->request->post($model->formName())["steps"];
            if ($model->steps==1){
                $professeur = IpRdvProfesseur::findOne(["pid"=>$model->pid]);
                $model->steps = $model->steps + 1;
                IpRdvTemple::setPrix($model->pid);

                $temple = IpRdvTemple::find()->select(['rdate'])->where(["status"=>0])
                    ->andWhere(['>=',"rdate",PublicFunctionUnion::getDateString()])
                    ->groupBy(['rdate'])->asArray()->all();
                if (count($temple)==0){
                    $model->steps = 1;
                    Yii::$app->session->setFlash('error', 'Pas de rdv');
                }
                return $this->render('prendre_une_rdv',["model"=>$model,'professeur'=>$professeur,'temple'=>$temple]);

            }else if($model->steps==2){
                $model->selectDate = Yii::$app->request->post($model->formName())["selectDate"];
                $model->steps = $model->steps + 1;
                IpRdvTemple::setPrix($model->pid);
                $rdvTimes = IpRdvTemple::find()->where(["status"=>0,"rdate"=>$model->selectDate])->asArray()->all();
                return $this->render('prendre_une_rdv',["model"=>$model,'rdvTimes'=>$rdvTimes]);
            }else if ($model->steps==3){
                $model->selectDate = Yii::$app->request->post($model->formName())["selectDate"];
                $model->selectTime = Yii::$app->request->post($model->formName())["selectTime"];
                $model->ctime = PublicFunctionUnion::getTimeString();
                IpRdvTemple::setPrix($model->pid);
                $selectRdv = IpRdvTemple::findOne(['id'=>$model->selectTime]);
                IpRdvTemple::deleteAll("status=:status and rdate<:rdate",[
                    ":status"=>0,
                    ":rdate"=>PublicFunctionUnion::getDateString()
                ]);
                if ($selectRdv){
                    $model->stime = $model->selectDate." ".$selectRdv->rtime;
                    $selectRdv->status = 1;
                    if ($selectRdv->save()){
                        $model->rid = $selectRdv->id;
                        $model->sid = Yii::$app->user->getId();
                        if ($model->save()){
                            $this->sendComfirmEmail($model->id);
                            return $this->render('rdv_student',["model"=>$model]);
                        }
                    }
                }
                Yii::$app->session->setFlash('error', 'Votre rendez-vous est impossible');
            }

        }

        $model->steps = 1;
        return $this->render('prendre_une_rdv',["model"=>$model]);
    }


    public function actionRdv_students(){
        $searchModel = new RdvStudentForm();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('rdv_student_lists',[
            'searchModel'=>$searchModel,
            'dataProvider'=>$dataProvider
        ]);
    }


    public function actionRelease_rdv(){
        $model = new IpRdvProfesseur();
        if (Yii::$app->request->post()&&$model->load(Yii::$app->request->post())){
            $model->sdate = Json::encode($model->sdate);
            $model->stime = Json::encode($model->stime);
            $model->dateArea = Json::encode($model->dateArea);
            $model->utime = PublicFunctionUnion::getTimeString();
            $model->ctime = PublicFunctionUnion::getTimeString();
            if ($model->save()){
                $this->produceRdv($model);
                return $this->redirect('index.php?r=rdv/index');
            }
        }
        return $this->render('release_rdv',['model'=>$model]);
    }

    public function actionTest(){
        Yii::$app->session->setFlash('error', 'Votre rendez-vous est impossible');
        return $this->render('index');
    }



    private function produceRdv($model){
        $model->dateArea = Json::decode($model->dateArea);
        $model->stime = Json::decode($model->stime);
        $model->sdate = Json::decode($model->sdate,true);
        $dates = PublicFunctionUnion::getDatesBetweenTwoDays($model->dateArea[0],$model->dateArea[1]);
        foreach ($dates as $key => $dateItem){
            $dates[$key] = [$dateItem,date("w",strtotime($dateItem))];
        }
        $dateVaild = [];

        foreach ($dates as $dateItem){
            if(in_array($dateItem[1],$model->sdate)){
                array_push($dateVaild,$dateItem);
            }
        }
        $stime = $model->stime[1] - $model->stime[0];

        $timeArray = [];

        $j = $model->stime[0];

        for ($i=0;$i<$stime;$i++){
            $timeModel = ArrayDatas::getRdvMins($model->interval);
            $hour = ArrayDatas::getRdvHours()[$j];
            $j = $j + 1;
            foreach ($timeModel as $minsItem){
                array_push($timeArray,$hour.":".$minsItem);
            }
        }

        IpRdvTemple::setPrix($model->pid);
        //删除从今天开始的所有的rdv
        IpRdvTemple::deleteAll([">=",'rdate',PublicFunctionUnion::getDateString()]);
        $temple = new IpRdvTemple();
        $temple->pid = $model->pid;
        $temple->status = 0;
        $temple->ctime = PublicFunctionUnion::getTimeString();
        foreach ($dateVaild as $dateItem){
            $temple->rdate = $dateItem[0];
            $temple->week = $dateItem[1];
            foreach ($timeArray as $timeItem){
                $temple->isNewRecord = true;
                $temple->rtime = $timeItem;
                $temple->save()&&$temple->id=0;
            }
        }

    }

    public function actionUpdate_rdv_professeur($id){
        $model = IpRdvProfesseur::findOne(['id'=>$id]);

        if(Yii::$app->request->post()&&$model->load(Yii::$app->request->post())){
            $model->sdate = Json::encode($model->sdate);
            $model->stime = Json::encode($model->stime);
            $model->dateArea = Json::encode($model->dateArea);
            $model->utime = PublicFunctionUnion::getTimeString();
            if ($model->save()){
                $this->produceRdv($model);
                return $this->redirect('index.php?r=rdv/index');
            }
        }

        $model->sdate = Json::decode($model->sdate,true);
        $model->stime = Json::decode($model->stime,true);
        $model->dateArea = Json::decode($model->dateArea,true);
        return $this->render('update_rdv_professeur',[
            'model'=>$model
        ]);
    }


    public function actionDelete_rdv($id){
        $item = IpRdvStudent::findOne(["id"=>$id]);
        if ($item->sid == Yii::$app->user->getId()){
            IpRdvTemple::setPrix($item->pid);
            $temp = IpRdvTemple::findOne(["id"=>$item->rid]);
            $temp->status = 0;
            $temp->save();
            $item->status = 0;
            $item->save();
        }

        return $this->redirect('index.php?r=rdv/index');
    }

    public function actionDelete_rdv_professeur($id){
        $model = IpRdvProfesseur::findOne(['id'=>$id]);
        $model->delete();
        return $this->redirect('index.php?r=rdv/index');
    }

    public function actionUpload(){
        if (Yii::$app->user->isGuest){
            return false;
        }

        if (Yii::$app->request->post()){
            $model = new IpRdv();
            $model->sdate = Yii::$app->request->post("sdate");
            $model->stime = Yii::$app->request->post("stime");
            $model->edate = Yii::$app->request->post("edate");
            $model->etime = Yii::$app->request->post("etime");
            $model->description = Yii::$app->request->post("description");
            $model->title = Yii::$app->request->post("rdv-title");
            $model->location = Yii::$app->request->post("location");
            $model->vaild = 0;
            $model->ctime = PublicFunctionUnion::getTimeString();
            $model->student = Yii::$app->user->getId();
            $email = Yii::$app->request->post('person');
            $professeur = Admin::findOne(['email'=>$email]);
            if ($professeur!=null){
                $model->professeur = $professeur->id;
                if ($model->save()){
                    $this->sendDemanderEmail($model->id);
                    return json_encode(['status'=>1,"message"=>"rdv already send, wait for response!"]);
                }else{
                    return json_encode(["status"=>0,"message"=>"some error happend please contact our admin!"]);
                }
            }
            return json_encode(["status"=>0,"message"=>"no such professeur!"]);
        }

        return json_encode(['status'=>0,"message"=>"no params!"]);
    }



    public  function sendDemanderEmail($rid){
        return Yii::$app
            ->mailer
            ->compose(
                ['html' => 'rdv-demander-html', 'text' => 'rdv-demander-text'],
                ['rid'=>$rid]
            )
            ->setTo(Yii::$app->getUser()->identity->email)->setCc(["info@iplme.org"])
            ->setSubject("Confirmation d'inscription")
            ->send();

    }


    public function sendComfirmEmail($rid){
        return Yii::$app
            ->mailer
            ->compose(
                ['html'=>'rdv-comfirm-html','rdv-comfirm-text'],
                ['rid'=>$rid]
            )
            ->setTo(Yii::$app->getUser()->identity->email)->setCc(["info@iplme.org"])
            ->setSubject("no-reply:Confirmation de votre rdv")
            ->send();
    }


    public function sendChangeRdvEmail($rid){
        $rdv = IpRdvStudent::findOne(['id'=>$rid]);
        $student = Admin::findOne(['id'=>$rdv->sid]);
        return Yii::$app
            ->mailer
            ->compose(
                ['html'=>'rdv-change-html','rdv-change-text'],
                ['rdv'=>$rdv,'student'=>$student]
            )->setTo($student->email)
            ->setSubject('no_reply Modification de Votre RDV DBA')
            ->send();
    }


    public function sendDeleteEmail($rid){
        $rdv = IpRdvStudent::findOne(['id'=>$rid]);
        $student = Admin::findOne(['id'=>$rdv->sid]);
        return Yii::$app
            ->mailer
            ->compose(
                ['html'=>'rdv-delete-html','rdv-delete-text'],
                ['rdv'=>$rdv,'student'=>$student]
            )->setTo($student->email)
            ->setSubject('no_reply annulation de Votre RDV DBA')
            ->send();
    }

    public function actionUpdate_rdv_student($id){
        $model = IpRdvStudent::findOne(["id"=>$id]);
        if ($model){
            if ($model->status==1){
                if (Yii::$app->request->post()&&$model->load(Yii::$app->request->post())){
                    $model->steps = Yii::$app->request->post($model->formName())["steps"];
                    if ($model->steps==1){
                        $professeur = IpRdvProfesseur::findOne(["pid"=>$model->pid]);
                        $model->steps = $model->steps + 1;
                        IpRdvTemple::setPrix($model->pid);
                        $temple = IpRdvTemple::find()->select(['rdate'])->where(["status"=>0])
                            ->andWhere(['>=',"rdate",PublicFunctionUnion::getDateString()])
                            ->groupBy(['rdate'])->asArray()->all();
                        if (count($temple) == 0){
                            $model->steps = 1;
                            Yii::$app->session->setFlash('error', 'Pas de rdv');

                        }
                        return $this->render('update_student_rdv',["model"=>$model,'professeur'=>$professeur,'temple'=>$temple]);

                    }else if($model->steps==2){
                        $model->selectDate = Yii::$app->request->post($model->formName())["selectDate"];
                        $model->steps = $model->steps + 1;
                        IpRdvTemple::setPrix($model->pid);
                        $rdvTimes = IpRdvTemple::find()->where(["status"=>0,"rdate"=>$model->selectDate])->asArray()->all();
                        return $this->render('update_student_rdv',["model"=>$model,'rdvTimes'=>$rdvTimes]);
                    }else if ($model->steps==3) {
                        $model->selectDate = Yii::$app->request->post($model->formName())["selectDate"];
                        $model->selectTime = Yii::$app->request->post($model->formName())["selectTime"];
                        $model->ctime = PublicFunctionUnion::getTimeString();
                        IpRdvTemple::setPrix($model->pid);
                        $selectRdv = IpRdvTemple::findOne(['id' => $model->selectTime]);
                        if ($selectRdv) {
                            $model->stime = $model->selectDate . " " . $selectRdv->rtime;
                            $selectRdv->status = 1;
                            if ($selectRdv->save()) {
                                $oldRdv = IpRdvTemple::findOne(["id"=>$model->oldAttributes["id"]]);
                                $oldRdv->status = 0;
                                $oldRdv->save();
                                $model->rid = $selectRdv->id;
                                if ($model->save()) {
                                    $this->sendChangeRdvEmail($model->id);
                                    return $this->redirect('index.php?r=rdv/rdv_students');
                                }
                            }
                        }
                    }
                }
                return $this->render('update_student_rdv',[
                    'model'=>$model
                ]);
            }
            return $this->redirect('index.php?r=rdv/rdv_students');

        }

        return $this->redirect('index.php?r=rdv/index');
    }


    public function actionDelete_rdv_student($id){
        $item = IpRdvStudent::findOne(["id"=>$id]);
        if ($item){
            IpRdvTemple::setPrix($item->pid);
            $rdvTemple =IpRdvTemple::findOne(["id"=>$item->rid]);
            if ($rdvTemple){
                $rdvTemple->status = 0;
                $rdvTemple->save();
            }
            $this->sendDeleteEmail($item->id);
            $item->status = 0;
            $item->delete();
        }

        return $this->redirect('index.php?r=rdv/rdv_students');

    }

}

<?php

namespace common\models;

use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "{{%admin}}".
 *
 * @property int $id
 * @property string $name
 * @property string $password
 * @property string $email
 * @property int $permission
 * @property int $types
 * @property int $block
 * @property string $auth_key
 * @property string $password_reset_token
 * @property string $display_name
 * @property string $ctime
 */
class Admin extends \yii\db\ActiveRecord implements IdentityInterface
{
    const Block = 0;
    const ADMIN_SUPER = 0;
    const ADMIN_NORMAL = 1;


    const USER_ADMIN = 0;
    const USER_PROFESSEUR = 1;
    const USER_STUDENT = 2;//2,3

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%admin}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'password', 'email', 'permission', 'block', 'display_name', 'ctime'], 'required'],
            [['permission', 'block','types'], 'integer'],
            [['name',"email"], 'trim'],
            [['ctime'], 'safe'],
            [['name', 'password', 'email', 'auth_key', 'password_reset_token', 'display_name'], 'string', 'max' => 255],
        ];
    }


    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => '姓名',
            'password' => '密码',
            'email' => '邮箱',
            'permission' => '0超级管理员,1普通管理员',
            'types'=>'0管理员,1教授,2学生',
            'display_name' => '显示名',
            'block' => '赋权',
            'ctime' => 'Ctime',
        ];
    }


    public static function findOneByEmail($email){
        return static::findOne(['email' => $email, 'block' => self::Block]);
    }

    /**
     * Finds an identity by the given ID.
     * @param string|int $id the ID to be looked for
     * @return IdentityInterface the identity object that matches the given ID.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'block' => self::Block]);
    }


    public function setPassword($password)
    {
        $this->password = Yii::$app->security->generatePasswordHash($password);
    }

    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password);
    }

    public function load($data, $formName = null)
    {
        $scope = $formName === null ? $this->formName() : $formName;
        if (isset($data[$scope]['password'])){
            /**
             * make sure is come from update
             * if udpate means that the password shouldn't null,and $data shouldn't be null too
             * compare two password , if two password is equal, then totally don't need to care
             * if don't equal then means need update
             */
            if ($this->password!=null){
                if ($data[$scope]['password']!=$this->password){
                    $data[$scope]['password'] = Yii::$app->security->generatePasswordHash($data[$scope]['password']);
                }
            }

        }



        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    /**
     * Finds an identity by the given token.
     * @param mixed $token the token to be looked for
     * @param mixed $type the type of the token. The value of this parameter depends on the implementation.
     * For example, [[\yii\filters\auth\HttpBearerAuth]] will set this parameter to be `yii\filters\auth\HttpBearerAuth`.
     * @return IdentityInterface the identity object that matches the given token.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Returns an ID that can uniquely identify a user identity.
     * @return string|int an ID that uniquely identifies a user identity.
     */
    public function getId()
    {
        return $this->getPrimaryKey();

    }

    /**
     * Returns a key that can be used to check the validity of a given identity ID.
     *
     * The key should be unique for each individual user, and should be persistent
     * so that it can be used to check the validity of the user identity.
     *
     * The space of such keys should be big enough to defeat potential identity attacks.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @return string a key that is used to check the validity of a given identity ID.
     * @see validateAuthKey()
     */
    public function getAuthKey()
    {
        return $this->auth_key;

    }

    /**
     * Validates the given auth key.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @param string $authKey the given auth key
     * @return bool whether the given auth key is valid.
     * @see getAuthKey()
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;

    }

    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }


    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'block' => self::Block,
        ]);
    }

    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int) substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }


}
